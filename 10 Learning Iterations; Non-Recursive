"""Now lets make this recursive: an algorithm"""
#modules import
import numpy as np
import matplotlib.pyplot as plt
import random
%matplotlib inline

#create paramaters
slope = float(random.randint(1,10))
yintercept = float(random.randint(1,5))

# output = f(x, slope, yintercept) 
f = lambda xs, m, b : (xs * m) + b

#create input(xs) and output (ys)
input1 = np.asarray([float(n) for n in np.arange(20)])
output1 = f(input1, slope, yintercept) 


class ForwardAndBackPropagation(object):
    def __init__(self, xs, realoutput, guessed_slope, guessed_b): 
        self.xs = np.asarray(xs)
        self.realoutput = np.asarray(realoutput)
        self.guess_slope = guessed_slope
        self.guess_b = guessed_b
        

    def distance(self): #returns np.array with distance results
        abs_D = self.realoutput - self.guess_output
        D_sqr = abs_D ** 2.
        return abs_D, D_sqr

    def differentiate_error(self):
        abs_D = self.distance()[0]
        r1 = np.sum(abs_D * self.guess_slope * 2.) / len(abs_D)
        r2 = np.sum(abs_D * 2.) / len(abs_D)
        return r1, r2

    def train(self):
        self.guess_output = (self.guess_slope * self.xs) + self.guess_b
        r1, r2 = self.differentiate_error()
        self.guess_slope += -r1 * .02
        self.guess_b += -r2 * .02
        return self.guess_slope, self.guess_b
    
my_instance = ForwardAndBackPropagation(input1, output1, float(random.randint(1,10), float(random.randint(1,10))
    
for i in range(100):
    my_instance.train()
else:
    return my_instance.train()


print("Actual Parameters: ", slope, yintercept)


