# The size of the dataset        def f(self):        return self.w[0]*self.xs + self.w[1]    def r(self):        yhats = self.f()        loss = yhats - self.ys        return np.array([              (2./self.N)*np.sum(loss*xs),              (2./self.N)*np.sum(loss)          ])        def update(self):                # Updating weights with respect to error        self.w -= self.a*self.r()    xs = np.arange(100)ws = [12., 20., 30.]ys = (xs**2)*ws[0] + (xs*ws[1]) + ws[2]example = LinearRegression(xs, ys, [100.,100.], .0000001)for i in range(10000):    example.update()print(example.w)yhats = xs*example.w[0] + example.w[1]plt.scatter(xs, ys, color='b')plt.scatter(xs, yhats, color='r')loss = (yhats-ys)**2print(np.corrcoef(loss, xs))
